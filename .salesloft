#!/bin/bash
source ~/.salesloft-clusters

export KUBECONFIG=~/.kube/config:~/.kube/gcp-config:~/.kube/datascience-config

alias sls="sft list-servers | grep -i"

# fixing Terraform
export AWS_DEFAULT_REGION=us-east-1

# Tmuxinator
alias us1="mux us1"
alias us2="mux us2"
alias prod="mux prod"

function connect_salesloft_vpn () {
  vpn_connected=$(netstat -i | grep $SALESLOFT_VPN_IP)
  while [[ -z $vpn_connected ]]; do
    networksetup -connectpppoeservice 'SalesLoft VPN'
    sleep 1
    vpn_connected=$(netstat -i | grep $SALESLOFT_VPN_IP)
  done
  echo "VPN Connected..."
}

function connect_sft () {
  sft_login=$(sft login | grep 'Session expires in')
  if [[ ! -z $sft_login ]]; then
    sft login
  fi
}

function connect_vpn_sft () {
  connect_salesloft_vpn
  connect_sft
}

# salesLoft
alias vpn="networksetup -connectpppoeservice 'SalesLoftVPN'"

alias kt="kubectl -n tooling"

alias set-kops-qa='export {NAME,CLUSTER_NAME}=cluster1.kubernetes-qa.qasalesloft.com; export KOPS_STATE_STORE=s3://salesloft-kops-qa'
alias set-kops-hydra='export NAME=hydra2; export CLUSTER_NAME=cluster1.k8s-hydra2.qasalesloft.com; export KOPS_STATE_STORE=s3://salesloft-kops-hydra2'
alias set-kops-dev='export {NAME,CLUSTER_NAME}=cluster1.k8s-dev01.devsalesloft.com; export KOPS_STATE_STORE=s3://salesloft-kops-dev'

alias taints="kubectl get nodes -o json | jq -c '.items[]| select(.spec.taints!='null') | .metadata.name, .spec.taints'"

function five_seconds_sleep () {
  echo "Sleeping ..."
  sleep 1
  echo "Sleeping ..."
  sleep 1
  echo "Sleeping ..."
  sleep 1
  echo "Sleeping ..."
  sleep 1
  echo "Sleeping ..."
  sleep 1
}

function seconds_sleep () {
  local num_sleep=$1
  for ((i=0; i<$num_sleep; i++))
  do
    echo "Sleeping ..."
    sleep 1
  done
}

function p8ndev () {
  kubectl config use-context cluster1.k8s-dev01.devsalesloft.com
  cd ~/src/panopticon
  git_sha=$(git rev-parse HEAD)
  docker build . -t registry.qasalesloft.com/panopticon:$git_sha
  docker push registry.qasalesloft.com/panopticon:$git_sha
  kubectl -n tooling set image deployments panopticon-listener listener=registry.qasalesloft.com/panopticon:$git_sha
  kubectl -n tooling set image deployments panopticon-overseer overseer=registry.qasalesloft.com/panopticon:$git_sha
  kubectl -n tooling set image deploy panopticon-inventory-builder inventory-builder=registry.qasalesloft.com/panopticon:$git_sha
  kubectl -n tooling get pods | grep panopticon | cut -d" " -f1 | xargs kubectl -n tooling delete pod
  echo "registry.qasalesloft.com/panopticon:$git_sha"
  stern -n tooling "panopticon-(over|invent)" --tail 0
}

function intranet() {
  cd ~/src/intranet_slack_bot
  docker build . -t registry.qasalesloft.com/intranet-slack-bot:master
  docker push registry.qasalesloft.com/intranet-slack-bot:master
  kubectl -n qa2 get pods | grep intranet | awk '{print $1}' | xargs kubectl -n qa2 delete pod
  seconds_sleep 10
  kubectl -n qa2 logs -f deploy/intranet-slack-bot
}

function twil() {
  cd ~/src/devops_tooling/twilio_logstash_middleware
  docker build . -t registry.qasalesloft.com/twilio_middleware:latest
  docker push registry.qasalesloft.com/twilio_middleware:latest
  kubectl -n tooling get pods | grep twilio-logstash-middleware | awk '{print $1}' | xargs kubectl -n tooling delete pod
  five_seconds_sleep
  kubectl -n tooling get pods | grep twilio-logstash-middleware | awk '{print $1}' | xargs kubectl -n tooling logs -f
}

function r4r () {
  cd ~/src/devops_tooling/k8s-prod-pr-notification
  docker build . -t registry.qasalesloft.com/ready4review:latest
  docker push registry.qasalesloft.com/ready4review:latest
  kubectl -n tooling get pods | grep ready | f1 | xargs kubectl -n tooling delete pod
  five_seconds_sleep
  kubectl -n tooling get pods | grep ready | awk '{print $1}' | xargs kubectl -n tooling logs -f
}

function treq () {
  cd ~/src/devops_tooling/techops-requests-bot
  docker build . -t registry.qasalesloft.com/techops-requests:latest
  docker push registry.qasalesloft.com/techops-requests:latest
  kubectl -n tooling rollout restart deploy techops-requests
  seconds_sleep 10
  kubectl -n tooling get pods | grep techops-req | awk '{print $1}' | xargs kubectl -n tooling logs -f

}

function toblog () {
  cd ~/src/devops_tooling/techops-changelog/
  docker build . -t registry.qasalesloft.com/techops-changelog:latest
  docker push registry.qasalesloft.com/techops-changelog:latest
  kubectl get pods -n tooling | grep techops-changelog | awk '{print $1}' | xargs kubectl -n tooling delete pod
  #seconds_sleep 5
  five_seconds_sleep
  pod_found=$(kubectl -n tooling get pods | grep techops-changelog | grep -v Termin | awk '{print $1}')
  echo "Pod Found: ${pod_found}"
  kubectl -n tooling logs -f $pod_found
}

function autoassign () {
  cd ~/src/devops_tooling/jira_autoassign/
  docker build . -t registry.qasalesloft.com/autoassign:latest
  docker push registry.qasalesloft.com/autoassign:latest
  kubectl get pods | grep autoass | awk '{print $1}' | xargs kubectl delete pod
  five_seconds_sleep
  kubectl get pods | grep autoass | grep Running | awk '{print $1}' | xargs kubectl logs -f
}

function tobl () {
  POD=$(kubectl -n tooling get pods | grep techops-change| grep Running | awk '{print $1}')
  echo "pod found: ${POD}"
  kubectl -n tooling logs -f $POD
}

function trl () {
  POD=$(kubectl -n tooling get pods | grep techops-req | awk '{print $1}')
  echo "pod found: ${POD}"
  kubectl -n tooling logs -f $POD
}

function tre () {
  POD=$(kubectl -n tooling get pods | grep techops-req | awk '{print $1}')
  kubectl -n tooling exec -it $POD bash
}

alias "gcp-qa"="kubectl config use-context gke_salesloft-qa-252014_us-central1_k8s-gcp-qa1"

function gcp_enc () {
  echo "gcp encoding!"
  cat $1 | gcloud kms encrypt --project salesloft-qa-252014 --location us-central1 --key kafka-certs-key --keyring kafka-qa-certs --plaintext-file - --ciphertext-file - | base64 | tee encrypted/$1.encrypted
}

vsc() {  #view-secret-commit
  cd /Users/$(whoami)/src/k8s-services-sensitive-envs-prod-encrypted
  git switch master
  git pull
  git switch $1
  for file in $(git diff-tree --no-commit-id --name-only -r head)
  do
    sops -d $file
    echo =======
  done
  cd -
}

function shas() {
  kubectl get deployments --all-namespaces -o wide -l salesloft-app=$1 | awk '{printf "%40s %s\n", $1, $8}'
}
